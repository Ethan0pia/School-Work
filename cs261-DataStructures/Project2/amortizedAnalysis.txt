Ethan Dunham
assignment 2
Part 2

1. Each time an item is added to the array without requiring reallocation, count 1 unit of cost. This cost will cover the assignment
which actually puts the item in the array.
2. Each time an item is added and requires reallocation, count X + 1 units of cost, where X is the number of items currently in the array.
This cost will cover the X assignments which are necessary to copy the contents of the full array into a new (larger) array, and the
additional assignment to put the item which did not fit originally.

1. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts
out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As
N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?

56 cost units.
average cost = 7/4
O(1)+

Items Cost TotalCost
1	1	1
2	1	2
3	1	3
4	1	4
5	1	5
6	1	6
7	1	7
8	1	8
9	9	17
10	1	18
11	1	19
12	1	20
13	1	21
14	1	22
15	1	23
16	1	24
17	17	41
18	1	42
19	1	43
20	1	44
21	1	45
22	1	46
23	1	47
24	1	48
25	1	49
26	1	50
27	1	51
28	1	52
29	1	53
30	1	54
31	1	55
32	1	56



2. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out
at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic
array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?

259 cost units.
average cost = 259/32
O(1)+
close to O(n)

Items Cost TotalCost
1	1	1
2	1	2
3	1	3
4	1	4
5	1	5
6	1	6
7	1	7
8	1	8
9	9	17
10	1	18
11	11	29
12	1	30
13	13	43
14	1	44
15	15	59
16	1	60
17	17	77
18	1	78
19	19	97
20	1	98
21	21	119
22	1	120
23	23	143
24	1	144
25	25	169
26	1	170
27	27	197
28	1	198
29	29	226
30	1	227
31	31	258
32	1	259



3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by
half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will result in poor
performance (O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the
initial capacity of the array is N/2.)

If you get to the point where the array doubles its size and then pop an item, it will then shrink. This can be done back
and forth to create a very bad performing dynamic array. This could be solved by making the array only shrink if it is at a lower
capacity than when it adds. So, since it doubles at full, it should shrink at 1/4 or 1/8.








































